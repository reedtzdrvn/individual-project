{"version":3,"sources":["components/AddNewColumn/AddNewColumn.module.css","components/Task.jsx","components/Tasks.jsx","components/AddNewColumn/AddNewColumn.jsx","components/Helpers/onDragEnd.js","reducer/reducer.js","App.js","AC/add-task.js","AC/delete-task.js","AC/delete-column.js","AC/add-title.js","index.js","assets/img/cross.svg","assets/img/vector.svg"],"names":["module","exports","Task","text","deleteTask","id","index","ColumnId","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","className","onClick","src","cross","alt","Tasks","tasks","addTask","title","deleteColumn","useState","add","setAdd","task","setTask","confirmTask","e","droppableId","droppableProps","map","item","key","placeholder","autoFocus","rows","value","onChange","target","vector","AddNewColumn","addTitle","columnName","setColumnName","s","getList","state","res","columns","forEach","column","onDragEnd","result","dispatch","source","destination","type","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","generateId","Math","random","toString","substr","initialState","reducer","action","group","filter","App","props","useReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.616fde6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"AddNewColumn_text__2FhVj\"};","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\nimport cross from \"../assets/img/cross.svg\";\n\nconst Task = ({ text, deleteTask, id, index, ColumnId }) => {\n    \n    return (\n        <Draggable draggableId={id} index={index}>\n            {(provided) => (\n                <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                >\n                    <li className=\"tasks__item\">\n                        <span>{text}</span>\n                        <img\n                            onClick={() => deleteTask(id, ColumnId)}\n                            src={cross}\n                            alt=\"cross\"\n                        />\n                    </li>\n                </div>\n            )}\n        </Draggable>\n    );\n};\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nimport vector from \"../assets/img/vector.svg\";\nimport cross from \"../assets/img/cross.svg\";\nimport Task from \"./Task\";\n\nconst Tasks = ({\n    tasks,\n    addTask,\n    title,\n    deleteTask,\n    deleteColumn,\n    id,\n    ColumnId,\n}) => {\n    const [add, setAdd] = useState(false);\n    const [task, setTask] = useState(\"\");\n\n    const confirmTask = (e) => {\n        addTask(task, title);\n        setAdd(false);\n        setTask(\"\");\n    };\n\n    return (\n        <Droppable droppableId={`${id}`}>\n            {(provided) => (\n                <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className=\"tasks\"\n                >\n                    <div className=\"tasks__title\">\n                        <p>{title}</p>\n                        <img\n                            onClick={() => deleteColumn(title)}\n                            src={cross}\n                            alt=\"cross\"\n                        />\n                    </div>\n                    <ul className=\"tasksController\">\n                        {tasks.map((item, index) => (\n                            <Task\n                                deleteTask={deleteTask}\n                                ColumnId={ColumnId}\n                                key={item.id}\n                                index={index}\n                                {...item}\n                            />\n                        ))}\n                    </ul>\n                    {provided.placeholder}\n\n                    {!add ? (\n                        <div\n                            onClick={() => setAdd(true)}\n                            className=\"buttonHandle\"\n                        >\n                            <img src={vector} alt=\"add\" />\n                            <button>Добавить еще одну карточку</button>\n                        </div>\n                    ) : (\n                        <div className=\"textareaHandle\">\n                            <textarea\n                                autoFocus\n                                className=\"text\"\n                                placeholder=\"Введите название карточки\"\n                                rows=\"3\"\n                                value={task}\n                                onChange={(e) => setTask(e.target.value)}\n                            ></textarea>\n                            <div className=\"flexContainer\">\n                                <button onClick={confirmTask}>\n                                    Добавить карточку\n                                </button>\n                                <img\n                                    onClick={() => setAdd(false)}\n                                    src={cross}\n                                    alt=\"cross\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n        </Droppable>\n    );\n};\n\nexport default Tasks;\n","import React, { useState } from \"react\";\n\nimport s from \"./AddNewColumn.module.css\";\n\nimport vector from \"../../assets/img/vector.svg\";\nimport cross from \"../../assets/img/cross.svg\";\n\nconst AddNewColumn = ({ addTitle }) => {\n    const [add, setAdd] = useState(false);\n    const [columnName, setColumnName] = useState(\"\");\n\n    const confirmColumn = () => {\n        addTitle(columnName);\n        setAdd(false);\n        setColumnName(\"\");\n    };\n\n    return (\n        <div className=\"tasks\">\n            {!add ? (\n                <div onClick={() => setAdd(true)} className=\"buttonHandle\">\n                    <img src={vector} alt=\"add\" />\n                    <button>Добавить еще одну колонку</button>\n                </div>\n            ) : (\n                <div className=\"textareaHandle\">\n                    <textarea\n                        autoFocus\n                        placeholder=\"Введите название колонки\"\n                        rows=\"3\"\n                        value={columnName}\n                        onChange={(e) => setColumnName(e.target.value)}\n                        className={\"text \" + s.text}\n                    ></textarea>\n                    <div className=\"flexContainer\">\n                        <button onClick={confirmColumn}>\n                            Добавить колонку\n                        </button>\n                        <img\n                            onClick={() => setAdd(false)}\n                            src={cross}\n                            alt=\"cross\"\n                        />\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default AddNewColumn;\n","const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source.tasks);\n    const destClone = Array.from(destination.tasks);\n    let [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    return {\n        source: { tasks: sourceClone, id: source.id },\n        destination: { tasks: destClone, id: destination.id },\n    };\n};\n\nconst getList = (state, id) => {\n    let res = null;\n    state.columns.forEach(column => {\n        if (column.id === id) {\n            res = column.tasks;\n        }\n    });\n    return { tasks: res, id };\n};\n\nconst onDragEnd = (result, dispatch, state) => {\n    let { source, destination } = result;\n    // dropped outside the list\n    if (!result.destination) {\n        return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n        let tasks = null;\n        state.columns.forEach(column => {\n            if (column.id === source.droppableId) {\n                tasks = column.tasks;\n            }\n        });\n        const items = reorder(\n            tasks,\n            result.source.index,\n            result.destination.index\n        );\n\n        dispatch({ type: \"SET_TASKS\", items, id: source.droppableId });\n    } else {\n        let items = move(\n            getList(state, source.droppableId),\n            getList(state, destination.droppableId),\n            source,\n            destination\n        );\n\n        dispatch({ type: \"CHANGE_TASKS\", items });\n    }\n};\n\nexport default onDragEnd;\n","const generateId = () => {\n    return Math.random().toString(10).substr(2, 9);\n};\n\nexport const initialState = {\n    columns: [],\n};\n\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_TASK\":\n            return {\n                columns: state.columns.map((item) => {\n                    if (item.title === action.group) {\n                        return {\n                            ...item,\n                            tasks: [\n                                ...item.tasks,\n                                {\n                                    text: action.task,\n                                    id: generateId(),\n                                },\n                            ],\n                        };\n                    } else return item;\n                }),\n            };\n        case \"ADD_TITLE\": {\n            return {\n                ...state,\n                columns: [\n                    ...state.columns,\n                    { title: action.title, tasks: [], id: generateId() },\n                ],\n            };\n        }\n        case \"DELETE_TASK\": {\n            return {\n                ...state,\n                columns: state.columns.map((item) => {\n                    if (item.id === action.ColumnId) {\n                        return {\n                            ...item,\n                            tasks: item.tasks.filter(\n                                (task) => task.id !== action.id\n                            ),\n                        };\n                    }\n                    return item;\n                }),\n            };\n        }\n        case \"DELETE_COLUMN\": {\n            return {\n                ...state,\n                columns: state.columns.filter(\n                    (item) => item.title !== action.title\n                ),\n            };\n        }\n        case \"SET_TASKS\":\n            return {\n                ...state,\n                columns: state.columns.map((item) => {\n                    if (item.id === action.id) {\n                        return { ...item, tasks: action.items };\n                    }\n                    return item;\n                }),\n            };\n        case \"CHANGE_TASKS\":\n            return {\n                ...state,\n                columns: state.columns.map((column) => {\n                    if (column.id === action.items.source.id) {\n                        return { ...column, tasks: action.items.source.tasks };\n                    } else if (column.id === action.items.destination.id) {\n                        return {\n                            ...column,\n                            tasks: action.items.destination.tasks,\n                        };\n                    }\n                    return column;\n                }),\n            };\n        default:\n            return state;\n    }\n};\n","import React, { useReducer } from \"react\";\nimport Tasks from \"./components/Tasks\";\nimport AddNewColumn from \"./components/AddNewColumn/AddNewColumn\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport onDragEnd from \"./components/Helpers/onDragEnd\";\nimport { reducer, initialState } from \"./reducer/reducer\";\n\nimport { addTask } from \"./AC/add-task\";\nimport { addTitle } from \"./AC/add-title\";\nimport { deleteTask } from \"./AC/delete-task\";\nimport { deleteColumn } from \"./AC/delete-column\";\n\nconst App = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <div className=\"wrapper\">\n            <DragDropContext\n                onDragEnd={(result) => onDragEnd(result, dispatch, state)}\n            >\n                {state.columns.map((item, index) => (\n                    <Tasks\n                        key={item.id}\n                        ColumnId={item.id}\n                        title={item.title}\n                        id={item.id}\n                        addTask={(task, title) =>\n                            dispatch(addTask(task, title))\n                        }\n                        deleteTask={(id, ColumnId) =>\n                            dispatch(deleteTask(id, ColumnId))\n                        }\n                        deleteColumn={(title) => dispatch(deleteColumn(title))}\n                        tasks={item.tasks}\n                    />\n                ))}\n                <AddNewColumn addTitle={(title) => dispatch(addTitle(title))} />\n            </DragDropContext>\n        </div>\n    );\n};\n\nexport default App;\n","export const addTask = (task, group) => {\n\treturn { type: \"ADD_TASK\", task, group };\n};\n","export const deleteTask = (id,ColumnId) => {\n\treturn { type: \"DELETE_TASK\", id,ColumnId };\n};\n","export const deleteColumn = (title) => {\n\treturn { type: \"DELETE_COLUMN\", title };\n};\n","export const addTitle = (title) => {\n\treturn { type: \"ADD_TITLE\", title };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n","module.exports = __webpack_public_path__ + \"static/media/cross.5fe0db66.svg\";","module.exports = __webpack_public_path__ + \"static/media/vector.6cb6e5fc.svg\";"],"sourceRoot":""}